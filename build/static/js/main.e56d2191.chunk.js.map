{"version":3,"sources":["Components/ImageLink.js","utilities/utilFunctions.js","Components/TitleLink.js","Components/Authors.js","Components/Publisher.js","Components/Book.js","Components/PageNav.js","utilities/eventFunctions.js","App.js","serviceWorker.js","index.js"],"names":["ImageLink","props","link","book","react_default","a","createElement","href","previewLink","src","imageLinks","thumbnail","slice","alt","TitleLink","title","Authors","className","authors","join","Publisher","publisher","Book","Components_TitleLink","volumeInfo","Components_Authors","Components_ImageLink","Components_Publisher","PageNav","pageIdx","getNewPage","id","onClick","_callee2","event","query","response","regenerator_default","wrap","_context2","prev","next","preventDefault","this","state","handleRequest","sent","setState","results","currSearch","stop","_callee3","direction","pageDiff","newIdx","_context3","resultsPerPage","window","scrollTo","_ref","Object","asyncToGenerator","mark","_callee","idx","_context","axios","get","concat","input","toLowerCase","split","abrupt","data","items","t0","_x3","_x4","apply","arguments","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_x","_handleSubmit","bind","assertThisInitialized","handleChange","target","value","_x2","_getNewPage","onSubmit","type","name","onChange","Array","isArray","Fragment","length","map","Components_Book","key","Components_PageNav","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e56d2191.chunk.js","sourcesContent":["import React from 'react';\nimport { convertToHttps } from '../utilities/utilFunctions';\n\nconst ImageLink = props => {\n  const { book } = props;\n  return (\n    <a href={book.previewLink}>\n      <img\n        src={convertToHttps(book.imageLinks.thumbnail)}\n        alt=\"book thumbnail\"\n      />\n    </a>\n  );\n};\n\nexport default ImageLink;\n","export const convertToHttps = link => {\n  return 'https' + link.slice(4);\n};\n\nexport const formatQuery = input => {\n  return input\n    .toLowerCase()\n    .split(' ')\n    .join('+');\n};\n","import React from 'react';\n\nconst TitleLink = props => {\n  const { book } = props;\n  return (\n    <h3>\n      <a href={book.previewLink}>{book.title}</a>\n    </h3>\n  );\n};\n\nexport default TitleLink;\n","import React from 'react';\n\nconst Authors = props => {\n  const { book } = props;\n  return <p className=\"italics\">by {book.authors.join(', ')}</p>;\n};\n\nexport default Authors;\n","import React from 'react';\n\nconst Publisher = props => {\n  const { book } = props;\n  return <p>Published by {book.publisher}</p>;\n};\n\nexport default Publisher;\n","import React from 'react';\nimport ImageLink from './ImageLink';\nimport TitleLink from './TitleLink';\nimport Authors from './Authors';\nimport Publisher from './Publisher';\n\nconst Book = props => {\n  const { book } = props;\n\n  return (\n    <div className=\"bookResult\">\n      <TitleLink book={book.volumeInfo} />\n      {/* Display book information, guarding against missing info*/}\n      {book.volumeInfo.authors && <Authors book={book.volumeInfo} />}\n\n      {book.volumeInfo.imageLinks ? (\n        <ImageLink book={book.volumeInfo} />\n      ) : (\n        <p className=\"grey\">Image not available</p>\n      )}\n\n      {book.volumeInfo.publisher && <Publisher book={book.volumeInfo} />}\n    </div>\n  );\n};\n\nexport default Book;\n","import React from 'react';\n\nconst PageNav = props => {\n  const { pageIdx, getNewPage } = props;\n  return (\n    <div id=\"pageNav\">\n      {pageIdx !== 0 ? (\n        <button\n          id=\"prev\"\n          onClick={() => {\n            getNewPage('prev');\n          }}\n        >\n          Back\n        </button>\n      ) : null}\n\n      <button\n        id=\"next\"\n        onClick={() => {\n          getNewPage('next');\n        }}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default PageNav;\n","import axios from 'axios';\nimport { formatQuery } from './utilFunctions';\n\nexport async function handleSubmit(event) {\n  event.preventDefault();\n  const { query } = this.state;\n  const response = await handleRequest(query, 0);\n  this.setState({\n    results: response,\n    query: '',\n    currSearch: query,\n    pageIdx: 0,\n  });\n}\n\nexport function handleChange(event) {\n  this.setState({\n    query: event.target.value,\n  });\n}\n\nexport async function getNewPage(direction) {\n  let pageDiff;\n  direction === 'next'\n    ? (pageDiff = this.state.resultsPerPage)\n    : (pageDiff = this.state.resultsPerPage * -1);\n  const newIdx = this.state.pageIdx + pageDiff;\n  const query = this.state.currSearch;\n  const response = await handleRequest(query, newIdx);\n  this.setState({\n    pageIdx: newIdx,\n    results: response,\n  });\n  window.scrollTo(0, 0);\n}\n\nexport let handleRequest = async function(query, idx) {\n  try {\n    let response = await axios.get(\n      `https://www.googleapis.com/books/v1/volumes?q=${formatQuery(\n        query\n      )}&startIndex=${idx}`\n    );\n    return response.data.items;\n  } catch (error) {\n    return 'error';\n  }\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Book, PageNav } from './Components';\nimport {\n  handleSubmit,\n  handleChange,\n  getNewPage,\n} from './utilities/eventFunctions';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query: '',\n      currSearch: '',\n      pageIdx: 0,\n      results: [],\n      resultsPerPage: 10,\n    };\n    this.handleSubmit = handleSubmit.bind(this);\n    this.handleChange = handleChange.bind(this);\n    this.getNewPage = getNewPage.bind(this);\n  }\n\n  render() {\n    const { results } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Find your next book</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <input\n            id=\"search\"\n            type=\"text\"\n            name=\"query\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n          <button type=\"submit\" id=\"submit\">\n            Search\n          </button>\n        </form>\n\n        <div className=\"results\">\n          {/* Need to make sure that an array of results was returned from the API call, otherwise there was an error or no results */}\n          {Array.isArray(results) ? (\n            <React.Fragment>\n              {results.length ? (\n                <h3>Results for '{this.state.currSearch}'</h3>\n              ) : null}\n              {results.map(book => (\n                <Book key={book.id} book={book} />\n              ))}\n            </React.Fragment>\n          ) : (\n            <p className=\"grey\">'No matching results. Try again.'</p>\n          )}\n        </div>\n\n        {Array.isArray(results) && results.length ? (\n          <PageNav pageIdx={this.state.pageIdx} getNewPage={this.getNewPage} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}